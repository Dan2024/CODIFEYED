import StandardTree from '../Fractal-Tree-components/StandardTree'
import CustomizableTree from '../Fractal-Tree-components/CustomisableTree'
import LSystemTree from '../Fractal-Tree-components/LSystemTree'
import './FractalForest.css'

export default function FractalForest() {
  return (
    <div className='container'>
      <ul className='tree-card__list'>
        {/*  */}

        <li className='tree-styling__container'>
          <div className='tree-styling__card'></div>
          <div className='tree-card'>
            <div className='tree-card__info-container'>
              <div className='tree-card__title'>Standard Fractal Tree</div>
              <div className='tree-card__info-text'>
                Fractal trees are normally created using{' '}
                <span className='highlighted-text'>recursive functions</span>. -
                functions that call themselves until a certain condition is met.{' '}
                In each iteration{' '}
                <span className='highlighted-text'>
                  any existing branch spawns a defined number of new branches
                </span>{' '}
                (in this case 2). Each new branch will be smaller than its
                parent branch. We implement a stop condition once the branches
                get to a certain length - otherwise we'd enter an infinte loop!
              </div>
              <div className='tree-card__cta'>
                <span className='highlighted-text'>CLICK THE CANVAS</span> TO
                GROW YOUR FIRST FRACTAL TREE
              </div>
            </div>
            <StandardTree />
          </div>
        </li>

        <li className='tree-styling__container'>
          <div className='tree-styling__card'></div>
          <div className='tree-card'>
            <LSystemTree />
            <div className='tree-card__info-container'>
              <div className='tree-card__title'>
                Lindenmayer-system Fractal Trees
              </div>
              <div className='tree-card__info-text'>
                Lindenmayer-systems (l-systems) were developed by a Hungarian
                theoretical biologist and botanist, Aristid Lindenmayer who used
                these systems to model plant, and plant cell development. At its
                core l-systems are{' '}
                <span className='highlighted-text'>text based</span> however we
                can use a{' '}
                <span className='highlighted-text'>
                  certain set of rules to
                </span>{' '}
                read the text generated by an l-system and{' '}
                <span className='highlighted-text'>visually display them</span>.
                For a detailed explanation of how this text is generated visit
                this{' '}
                <a
                  target='_blank'
                  rel='noreferrer'
                  href='https://en.wikipedia.org/wiki/L-system'
                >
                  Wikipedia page.
                </a>
              </div>

              <div className='tree-card__cta'>
                For more info and to see the rules used when generating these
                trees, feel free to visit{' '}
                <a
                  target='_blank'
                  rel='noreferrer'
                  href='http://paulbourke.net/fractals/lsys/'
                >
                  this page.
                </a>
              </div>
            </div>
          </div>
        </li>

        <li className='tree-styling__container'>
          <div className='tree-styling__card'></div>
          <div className='tree-card'>
            <div className='tree-card__info-container'>
              <div className='tree-card__title'>
                Randomly Generated Fractal Tree
              </div>
              <div className='tree-card__info-text'>
                A merge sort uses a technique called{' '}
                <span className='highlighted-text'>divide and conquer</span>.{' '}
                The list is repeatedly divided into two until all the elements
                are separated individually. Pairs of elements are then{' '}
                <span className='highlighted-text'>
                  compared, placed into order and combined.
                </span>{' '}
                The process is then repeated until the list is recompiled as a
                whole.
              </div>
            </div>
            <CustomizableTree />
          </div>
        </li>
      </ul>
    </div>
  )
}
